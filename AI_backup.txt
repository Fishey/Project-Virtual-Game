using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class AIScript : MonoBehaviour
{
    float sharkLength;

    public Rigidbody shark;
    public Transform patrolArea;
    public Transform indicator;

    //shark
    private Vector3 currentTargetPosition;
    private float distanceToTargetPosition = 15f;
    public float maxSharkSpeed;
    private float currentSharkSpeed;
    private float standartTurnValue = 1f;

    //raycasts
    private float rayCastLength;
    private float rayCastTurnValue = 0.5f;

    //stackfix
    private Quaternion stuckRotation;

    // Use this for initialization
    void Start()
    {
        currentSharkSpeed = maxSharkSpeed / 2;
        sharkLength = GetComponent<MeshFilter>().mesh.bounds.extents.z;
        rayCastLength = sharkLength * 3;
        GetTargetPosition();
    }

    void FixedUpdate()
    {
        RayCastsCorrection();
        //RayCastPlayerDetection();
    }

    // Update is called once per frame
    void Update()
    {

    }

    void Move()
    {
        shark.velocity = shark.transform.forward * currentSharkSpeed;
    }

    void GetDirection(Vector3 direction, bool directionChanged)
    {
        Vector3 vectorToTarget = (currentTargetPosition - shark.transform.position);
        //create the rotation we need to be in to look at the target
        Quaternion lookRotation = Quaternion.LookRotation(direction);

        //rotate us over time according to speed until we are in the required rotation
        if (directionChanged)
            shark.transform.rotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime );
        else
            shark.transform.rotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime * Random.Range(standartTurnValue / 2, standartTurnValue));

        if (vectorToTarget.magnitude <= distanceToTargetPosition)
        {
            GetTargetPosition();
        }
    }

    void GetTargetPosition()
    {
        Vector3 rndPosWithinPatrolArea;
        rndPosWithinPatrolArea = new Vector3(Random.Range(-1f, 1f), Random.Range(-1f, 1f), Random.Range(-1f, 1f));
        rndPosWithinPatrolArea = patrolArea.TransformPoint(rndPosWithinPatrolArea * 0.5f);
        Vector3 direction = (rndPosWithinPatrolArea - shark.transform.position);

        if (direction.magnitude > 50)
        {
            currentTargetPosition = rndPosWithinPatrolArea;
            indicator.position = currentTargetPosition;
        }
        else
        {
            GetTargetPosition();
        }
    }

    //TODO
    /*
     * fix wrong turning !!!
     * fix stucking into flat/symmetrical objects !!!
     */

    //Prepare your ass if u really want to look at this...
    void RayCastsCorrection()
    {
        bool directionChanged = false;

        //find the vector pointing from our position to the target
        Vector3 direction = (currentTargetPosition - shark.transform.position);
        Vector3 correctedDirection = direction;

        Vector3 pos = shark.transform.position;
        Vector3 Fpos = pos + shark.transform.forward;
        Vector3 RApos = pos + shark.transform.right * 1.5f - shark.transform.up / 2f + shark.transform.forward;
        Vector3 LApos = pos - shark.transform.right * 1.5f - shark.transform.up / 2f + shark.transform.forward;
        Vector3 RApos2 = RApos + shark.transform.right - shark.transform.up / 2f;
        Vector3 LApos2 = LApos - shark.transform.right - shark.transform.up / 2f;
        Vector3 UApos2 = pos - shark.transform.forward * 2;
        Vector3 DApos2 = pos - shark.transform.forward * 2;

        RaycastHit Fhit;
        RaycastHit Uhit;
        RaycastHit Dhit;
        RaycastHit Rhit;
        RaycastHit Lhit;
        RaycastHit UAhit;
        RaycastHit DAhit;
        RaycastHit RAhit;
        RaycastHit LAhit;
        RaycastHit UA2hit;
        RaycastHit DA2hit;
        RaycastHit RA2hit;
        RaycastHit LA2hit;

        Vector3 angleRight = Quaternion.AngleAxis(15f, shark.transform.up) * shark.transform.forward;
        Vector3 angleLeft = Quaternion.AngleAxis(-15f, shark.transform.up) * shark.transform.forward;
        Vector3 angleRight2 = Quaternion.AngleAxis(30f, shark.transform.up) * shark.transform.forward;
        Vector3 angleLeft2 = Quaternion.AngleAxis(-30f, shark.transform.up) * shark.transform.forward;
        Vector3 angleUp = Quaternion.AngleAxis(15f, -shark.transform.right) * shark.transform.forward;
        Vector3 angleDown = Quaternion.AngleAxis(-15f, -shark.transform.right) * shark.transform.forward;
        Vector3 angleUp2 = Quaternion.AngleAxis(30f, -shark.transform.right) * shark.transform.forward;
        Vector3 angleDown2 = Quaternion.AngleAxis(-30f, -shark.transform.right) * shark.transform.forward;

        Vector3 right = Quaternion.AngleAxis(90f, shark.transform.up) * shark.transform.forward;
        Vector3 left = Quaternion.AngleAxis(-90f, shark.transform.up) * shark.transform.forward;
        Vector3 up = Quaternion.AngleAxis(90f, -shark.transform.right) * shark.transform.forward;
        Vector3 down = Quaternion.AngleAxis(-90f, -shark.transform.right) * shark.transform.forward;

        float Fdistance = 9000f;
        float UAdistance = 9000f;
        float DAdistance = 9000f;
        float RAdistance = 9000f;
        float LAdistance = 9000f;
        float UAdistance2 = 9000f;
        float DAdistance2 = 9000f;
        float RAdistance2 = 9000f;
        float LAdistance2 = 9000f;

        //Raycast Forward
        bool RCforward = Physics.Raycast(Fpos, shark.transform.forward, out Fhit, rayCastLength * 2);
        //Raycast Angled Up
        bool RCangledUp = Physics.Raycast(pos, angleUp, out UAhit, rayCastLength);
        //Raycast Angled Down
        bool RCangledDown = Physics.Raycast(pos, angleDown, out DAhit, rayCastLength / 2);
        //Raycast Angled Up 2
        bool RCangledUp2 = Physics.Raycast(UApos2, angleUp2, out UA2hit, rayCastLength / 2);
        //Raycast Angled Down 2
        bool RCangledDown2 = Physics.Raycast(DApos2, angleDown2, out DA2hit, rayCastLength);
        //Raycast Angled Right
        bool RCangledRight = Physics.Raycast(RApos, angleRight, out RAhit, rayCastLength);
        //Raycast Angled Left
        bool RCangledLeft = Physics.Raycast(LApos, angleLeft, out LAhit, rayCastLength);
        //Raycast Right 2
        bool RCangledRight2 = Physics.Raycast(RApos2, angleRight2, out RA2hit, rayCastLength / 2);
        //Raycast Left 2
        bool RCangledLeft2 = Physics.Raycast(LApos2, angleLeft2, out LA2hit, rayCastLength / 2);

        //Display raycasts + check distances 
        if (RCforward)
        {
            Vector3 FVec = Fhit.point - Fpos;
            Fdistance = FVec.magnitude;
            Debug.DrawLine(Fpos, Fhit.point, Color.red);
        }
        if (RCangledUp)
        {
            Vector3 UVec = UAhit.point - pos;
            UAdistance = UVec.magnitude;
            Debug.DrawLine(pos, UAhit.point, Color.green);
        }
        if (RCangledDown)
        {
            Vector3 DVec = DAhit.point - pos;
            DAdistance = DVec.magnitude;
            Debug.DrawLine(pos, DAhit.point, Color.green);
        }
        if (RCangledUp2)
        {
            Vector3 UVec2 = UA2hit.point - UApos2;
            UAdistance2 = UVec2.magnitude;
            Debug.DrawLine(UApos2, UA2hit.point, Color.green);
        }
        if (RCangledDown2)
        {
            Vector3 DVec2 = DA2hit.point - DApos2;
            DAdistance2 = DVec2.magnitude;
            Debug.DrawLine(DApos2, DA2hit.point, Color.green);
        }
        if (RCangledRight)
        {
            Vector3 RVec = RAhit.point - RApos;
            RAdistance = RVec.magnitude;
            Debug.DrawLine(RApos, RAhit.point, Color.blue);
        }
        if (RCangledLeft)
        {
            Vector3 LVec = LAhit.point - LApos;
            LAdistance = LVec.magnitude;
            Debug.DrawLine(LApos, LAhit.point, Color.blue);
        }
        if (RCangledRight2)
        {
            Vector3 RVec2 = RA2hit.point - RApos2;
            RAdistance2 = RVec2.magnitude;
            Debug.DrawLine(RApos2, RA2hit.point, Color.magenta);
        }
        if (RCangledLeft2)
        {
            Vector3 LVec2 = LA2hit.point - LApos2;
            LAdistance2 = LVec2.magnitude;
            Debug.DrawLine(LApos2, LA2hit.point, Color.magenta);
        }

        //Resolving forward
        if (RCforward)
        {
            correctedDirection = shark.transform.forward;
            correctedDirection += Fhit.normal * Fdistance / 5f;
            directionChanged = true;

            if (Fdistance < 3f)
                currentSharkSpeed = -currentSharkSpeed;
        }

        //Resolving Vertical
        if (RCangledUp)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += UAhit.normal * UAdistance / 10f;
            directionChanged = true;

        }
        if (RCangledDown)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += DAhit.normal * DAdistance / 10f;
            directionChanged = true;
        }
        if (RCangledUp2)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += UA2hit.normal * UAdistance2 / 10f;
            directionChanged = true;
        }
        if (RCangledDown2)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += DA2hit.normal * DAdistance2 / 10f;
            directionChanged = true;

        }

        //Resolving Horizontal
        if (RCangledRight)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += RAhit.normal * RAdistance / 10f;
            directionChanged = true;

        }
        if (RCangledLeft)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += LAhit.normal * LAdistance / 10f;
            directionChanged = true;
        }

        if (RCangledRight2)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += RA2hit.normal * RAdistance2 / 10f;
            directionChanged = true;
        }
        if (RCangledLeft2)
        {
            if (correctedDirection == direction)
                correctedDirection = shark.transform.forward;

            correctedDirection += LA2hit.normal * LAdistance2 / 10f;
            directionChanged = true;
        }

        ////Stuck fix
        //if (Fdistance < 5f)
        //{
        //    float Udistance = 9000f;
        //    float Ddistance = 9000f;
        //    float Rdistance = 9000f;
        //    float Ldistance = 9000f;

        //    //Raycast Up
        //    if (Physics.Raycast(pos, up, out Uhit, rayCastLength))
        //    {
        //        Vector3 UVec = Uhit.point - pos;
        //        Udistance = UVec.magnitude;
        //        Debug.DrawLine(pos, Uhit.point, Color.white);
        //    }
        //    //Raycast Down
        //    if (Physics.Raycast(pos, down, out Dhit, rayCastLength))
        //    {
        //        Vector3 DVec = Dhit.point - pos;
        //        Ddistance = DVec.magnitude;
        //        Debug.DrawLine(pos, Dhit.point, Color.white);
        //    }
        //    //Raycast Right
        //    if (Physics.Raycast(pos, right, out Rhit, rayCastLength))
        //    {
        //        Vector3 RVec = Rhit.point - pos;
        //        Rdistance = RVec.magnitude;
        //        Debug.DrawLine(pos, Rhit.point, Color.white);
        //    }
        //    //Raycast Left
        //    if (Physics.Raycast(pos, left, out Lhit, rayCastLength))
        //    {
        //        Vector3 LVec = Lhit.point - pos;
        //        Ldistance = LVec.magnitude;
        //        Debug.DrawLine(pos, Lhit.point, Color.white);
        //    }

        //    List<float> distancesList = new List<float>();
        //    distancesList.Add(Udistance);
        //    distancesList.Add(Ddistance);
        //    distancesList.Add(Rdistance);
        //    distancesList.Add(Ldistance);

        //    float biggest = distancesList[0];

        //    foreach (float value in distancesList)
        //        if (value > biggest) biggest = value;

        //    if (biggest == Udistance)
        //    {
        //        correctedDirection = -up;
        //        Quaternion lookRotation = Quaternion.LookRotation(correctedDirection);
        //        stuckRotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime * rayCastTurnValue);
        //    }
        //    else if (biggest == Ddistance)
        //    {
        //        correctedDirection = -down;
        //        Quaternion lookRotation = Quaternion.LookRotation(correctedDirection);
        //        stuckRotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime * rayCastTurnValue);
        //    }
        //    else if (biggest == Rdistance)
        //    {
        //        correctedDirection = -right;
        //        Quaternion lookRotation = Quaternion.LookRotation(correctedDirection);
        //        stuckRotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime * rayCastTurnValue);
        //    }
        //    else if (biggest == Ldistance)
        //    {
        //        correctedDirection = -left;
        //        Quaternion lookRotation = Quaternion.LookRotation(correctedDirection);
        //        stuckRotation = Quaternion.Slerp(shark.transform.rotation, lookRotation, Time.deltaTime * rayCastTurnValue);
        //    }

        //    currentSharkSpeed = -currentSharkSpeed / 2;
        //    shark.transform.rotation = stuckRotation;

        //    if (Fdistance > 10f)
        //    {
        //        directionChanged = false;
        //    }
        //    rayCastTurnValue = 1f;
        //}
        //else
        //{
        //Applying
        if (!directionChanged)
        {
            if (currentSharkSpeed < maxSharkSpeed)
                currentSharkSpeed += 0.1f;
        }
        else if (directionChanged && correctedDirection != direction)
        {
            direction = correctedDirection;
            if (currentSharkSpeed > maxSharkSpeed / 3)
                currentSharkSpeed -= 0.1f;
        }
        GetDirection(direction, directionChanged);
        Move();
        //}
    }

    void RayCastPlayerDetection()
    {
        RaycastHit hit;
        Vector3 pos = shark.transform.position;
        pos += shark.transform.forward;

        if (Physics.Raycast(pos, indicator.transform.position, out hit, 100f))
        {
            Debug.DrawLine(pos, indicator.transform.position, Color.yellow);
        }
    }
}
